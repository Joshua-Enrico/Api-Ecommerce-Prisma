// En prisma, las tablas se declaran en un mismo archivo

// Especificamos que orm vamos a usar , en este caso es Prisma
generator client {
  provider = "prisma-client-js"
}

// Especificamos el tipo de db y la url de conexion
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Tabla de administradores
model admin {
  id          Int @id @default(autoincrement())
  name        String @db.VarChar(60)
  email       String @db.VarChar(254)
  password    String @db.VarChar(60)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean @default(true)
}

// Tabla de empresas vendedoras
model seller {
  id              Int @id @default(autoincrement())
  sellerusers     selleruser[]
  products        product[]
  warehouses      warehouse[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deactivatedAt   DateTime
  active          Boolean @default(true)
}

// Tabla de usuarios vendedores
model selleruser {
  id              Int @id @default(autoincrement())
  name            String @db.VarChar(60)
  email           String @db.VarChar(254)
  password        String @db.VarChar(60)
  seller          seller @relation(fields: [sellerId], references: [id])
  sellerId        Int
  createdAt       DateTime @default(now())
  deactivatedAt   DateTime
  active          Boolean @default(true)
}


model warehouse {
  id              Int @id @default(autoincrement())
  name            String @db.VarChar(60)
  address         String @db.VarChar(254)
  seller          seller @relation(fields: [sellerId], references: [id])
  sellerId        Int
  product         product[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deactivatedAt   DateTime
  active          Boolean @default(true)
}

// Tabla de productos
model product {
  sku             Int @id @default(autoincrement())
  name            String @db.VarChar(60)
  description     String @db.Text
  quantity        Int
  price           Float
  warehouse       warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId     Int
  seller          seller @relation(fields: [sellerId], references: [id])
  sellerId        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deactivatedAt   DateTime
  active          Boolean @default(true)
}

// Tabla de usuarios compradores
model user {
  id              Int @id @default(autoincrement())
  name            String @db.VarChar(60)
  email           String @db.VarChar(254)
  password        String @db.VarChar(60)
  createdAt       DateTime @default(now())
  carts           cart[]
  updatedAt       DateTime @updatedAt
  deactivatedAt   DateTime
  active          Boolean @default(true)
}

// Tabla de carritos
model cart {
  id              Int @id @default(autoincrement())
  user            user @relation(fields: [userId], references: [id])
  userId          Int
  products        Json
  status          String @db.VarChar(10)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deactivatedAt   DateTime
  active          Boolean @default(true)
}